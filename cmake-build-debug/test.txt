Module myModule
    public Module MyModule
        public let a as i64
        function myFunction(byval a4 as i64)AS u16 //commentasdfasdfsd
            return 1+5-10/9-(100*3.1415e-10+13E10)
        end function

        public sub mySub(p as int)
            if p>=100 then
                myFunction(100)
                if p.toString()==100 then
                    print(123455)
                end if
            elseif p<90 then
                path1.path2.anotherFunction(20)
            else
                mySub(p-10)
            end if
            let state = print(obj.myFunction(p-10).toString(),100)
            while state<>someEnum.Succeed
                print(234234)
            wend
            select case abcVar
                case asdf
                    for i=0 to state.data.size step 1
                        if state.data.onError then exit for end if
                        print(state.data(i)+1+2+3+4+5+-6+---7++8---9)
                    next
            end select
        end sub
        let ins,b as long=100,c=100
    end Module

    type MyType
        member1 as i32
        member2 as i64
    end type

    type myType
        member1 as i32
        member2 as i64
    end type

    private enum MyEnum
        member1=10

            member2
    end enum

    private enum MyEnum
        member1=10

            member2
    end enum

    public let a as MyContainer.NameSpace1.i32 = 100,c=a


    public module myModule2

    end module

    public module MyModule

    end module

End Module

Module myModule2

end module

let ins,b as long=100,c=100