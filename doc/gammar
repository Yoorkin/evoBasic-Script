//非终结符小驼峰,终结符大写,e代表空串,语义写在花括号里

moduleDecl -> accessFlag moduleMember 
accessFlag -> PUBLIC | PRIVATE | FRIEND | e
moduleMember -> functionDecl | subDecl | typeDecl | enumDecl | variableDecl | classDecl | moduleDecl

classDecl -> accessFlag classMember
classMember -> methodFlag classMethod | typeDecl | enumDecl | variableDecl 
methodFlag -> STATIC | VIRTUAL | OVERRIDE | e
classMethod -> functionDecl | subDecl


typeDecl -> TYPE ID typeList END TYPE
typeList  -> ID AS locating typeList_
typeList_ -> ID AS locating typeList_ | e

enumDecl -> ENUM ID enumList END ENUM
enumList -> ID enumVal enumList_
enumList_ -> ID enumVal enumList_ | e
enumVal -> = DIGHT | e

functionDecl -> FUNCTION ID(parameterList) AS locating stmtSets END FUNCTION 
subDecl -> SUB ID(parameterList) stmtSets END SUB 

stmtSets -> stmt stmtSets | e
stmt -> forStmt | variableDecl | loopStmt | ifStmt | selectStmt | controlStmt | expr

parameterList -> parameter parameterList_ 
               | e
parameterList_ -> , parameter parameterList_ 
                | e

parameter -> ID AS locating 
           | BYVAL ID AS locating 
           | BYREF ID AS locating 
           | OPTIONAL ID AS locating initial


variableDecl  -> LET ID  typeAnnotation initial variableDecl_   
               | const ID AS ID1 = constExpr variableDecl_   

variableDecl_ -> , ID  typeAnnotation initial variableDecl_1   
               | e 

importDecl -> 

initial -> = expr 
         | e   

typeAnnotation -> AS locating 
                | e    


expr  -> cmp expr_ 

expr_ -> AND cmp expr_
       | OR  cmp expr_
       | XOR cmp expr_
       | e 

cmp  -> NOT add cmp_ 
      | add cmp_

cmp_ -> == add cmp_1 
      | <> add cmp_1 
      | <  add cmp_1 
      | >  add cmp_1 
      | <= add cmp_1 
      | =< add cmp_1 
      | >= add cmp_1 
      | e 

add  -> term add_ 

add_ -> + term add_1 
      | - term add_1 
      | e 

term  -> factor term_ 

term_ -> * factor term_1
       | / factor term_1 
       | \ factor term_1 
       | e 

factor -> unit factor_
factor_ -> = unit factor_
         | AS locating
         | e

unit -> terminal unit_
      | - terminal unit_
      | + terminal unit_
 
unit_ -> . terminal unit_
       | e

terminal -> DIGIT
          | DEMICAL
          | STRING  
          | CHAR
          | (expr)    
          | ID argsBody                 

argsBody -> (argList)   
          | e

argList  -> expr argList_      
argList_ -> , expr argList_1  
          | e        

locating  -> ID locating_ 
locating_ -> . ID locating_ | e          


ifStmt -> IF expr THEN stmtSets elsePart END IF 
elsePart -> ELSEIF expr THEN stmtSets
         | ELSE stmtSets
         | e

loopStmt -> WHILE expr stmtSets WEND 

forStmt -> FOR expr1 = expr2 TO expr3 STEP expr4 stmtSets NEXT 
        
controlStmt -> RETURN expr 
            | CONTINUE 
            | EXIT exitFlag 

exitFlag -> For 
          | While  
          | Sub 

selectStmt -> SELECT CASE expr caseList END SELECT      
caseList -> CASE case caseList                             
          | e                                          
case_ -> ELSE stmtSets | expr stmtSets




